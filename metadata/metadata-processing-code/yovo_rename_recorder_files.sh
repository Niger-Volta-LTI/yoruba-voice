# bash one-liner to rename a folder of files, generated by the speech recorder app, or manually cut into the final dataset format
# of 00001.wav - 20000.wav (5 digits)


# 4001-4250_Teleola Aderiye_August 24
$ ls -1prt *.wav | grep -v "/$" | cat -n | while read n f; do mv -n "${f}" "$(printf "%05d" $((4000 + $n)) ).${f#*.}"; done

# For directories of 250 speech recorder generated files after 10k, the time-stamps were now all the same time, due to how
# Aremu copied them over to Google Drive, so the above script did not work and we had to resort to the version below 
# (non-reversing the list). One caveat is that sometimes, Aremu would circle back to imperfect takes, at the end of recording, 
# and that can throw off the time-stamp based ordering. So care must always be taken to double check that the results make sense.

# iroro:~/Downloads/yovo_renaming/15751-16000_Adenekan_Mariam:_0}$
$ ls -1pt *.wav | grep -v "/$" | cat -n | while read n f; do mv -n "${f}" "$(printf "%05d" $((15750 + $n)) ).${f#*.}"; done

Explanation of one-liner: 
(0) `ls -1`: list files with each entry on an new line
	- `p` puts a slash behind any directories (N/A) in this case, but good practice 
	- `rt` are for sorting in order of modification time-stamp and time reversal, i.e. oldest entries first 
(1) Processing directories of 250 each towards the end of the 20k batch, all the time-stamps were the same or 
	already sorted by oldest first, so we remove `-r`. 
	Note: If the file names are ordered (0001-01000) we do not need `t` to get the correct ordering
(2) `grep`
(3) `cat`
(3) pads indexes up to 5 digits since we have 25000 files (up to 5 digits, i.e. less that 99999)
(4) maintains original extension. 